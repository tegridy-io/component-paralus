apiVersion: apps/v1
kind: Deployment
metadata:
  annotations: null
  labels:
    app.kubernetes.io/instance: paralus
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kratos
    app.kubernetes.io/version: v0.11.1
    helm.sh/chart: kratos-0.29.0
  name: paralus-kratos
  namespace: syn-paralus
spec:
  progressDeadlineSeconds: 3600
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: paralus
      app.kubernetes.io/name: kratos
  strategy:
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/kratos-config: 46b6e821fa71f1efbcd12ffcb4a177ad8807aa5a8a6a945466e868bed6311385
        checksum/kratos-templates: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
      labels:
        app.kubernetes.io/instance: paralus
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kratos
        app.kubernetes.io/version: v0.11.1
        helm.sh/chart: kratos-0.29.0
    spec:
      automountServiceAccountToken: true
      containers:
        - args:
            - serve
            - all
            - --config
            - /etc/config/kratos.yaml
            - --config
            - /etc/kratos/providers.yaml
            - --config
            - /etc/kratos/hooks/kratos-config-hooks.yaml
          command:
            - kratos
          env:
            - name: DSN
              valueFrom:
                secretKeyRef:
                  key: dsn
                  name: kratos
            - name: SECRETS_DEFAULT
              valueFrom:
                secretKeyRef:
                  key: secretsDefault
                  name: kratos
                  optional: true
            - name: SECRETS_COOKIE
              valueFrom:
                secretKeyRef:
                  key: secretsCookie
                  name: kratos
                  optional: true
            - name: SECRETS_CIPHER
              valueFrom:
                secretKeyRef:
                  key: secretsCipher
                  name: kratos
                  optional: true
            - name: COURIER_SMTP_CONNECTION_URI
              valueFrom:
                secretKeyRef:
                  key: smtpConnectionURI
                  name: kratos
            - name: SERVE_PUBLIC_BASE_URL
              valueFrom:
                configMapKeyRef:
                  key: serve_public_base_url
                  name: kratos-config
            - name: SELFSERVICE_DEFAULT_BROWSER_RETURN_URL
              valueFrom:
                configMapKeyRef:
                  key: default_browser_return_url
                  name: kratos-config
            - name: SELFSERVICE_ALLOWED_RETURN_URLS
              valueFrom:
                configMapKeyRef:
                  key: default_browser_return_url
                  name: kratos-config
            - name: SELFSERVICE_FLOWS_SETTINGS_UI_URL
              valueFrom:
                configMapKeyRef:
                  key: selfservice_flows_settings_ui_url
                  name: kratos-config
            - name: SELFSERVICE_FLOWS_RECOVERY_UI_URL
              valueFrom:
                configMapKeyRef:
                  key: selfservice_flows_recovery_ui_url
                  name: kratos-config
            - name: SELFSERVICE_FLOWS_REGISTRATION_UI_URL
              valueFrom:
                configMapKeyRef:
                  key: selfservice_flows_registration_ui_url
                  name: kratos-config
            - name: SELFSERVICE_FLOWS_ERROR_UI_URL
              valueFrom:
                configMapKeyRef:
                  key: selfservice_flows_error_ui_url
                  name: kratos-config
          image: oryd/kratos:v0.11.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              httpHeaders:
                - name: Host
                  value: 127.0.0.1
              path: /admin/health/ready
              port: 4434
            initialDelaySeconds: 5
            periodSeconds: 10
          name: kratos
          ports:
            - containerPort: 4434
              name: http-admin
              protocol: TCP
            - containerPort: 4433
              name: http-public
              protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              httpHeaders:
                - name: Host
                  value: 127.0.0.1
              path: /admin/health/ready
              port: 4434
            initialDelaySeconds: 5
            periodSeconds: 10
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 100
          startupProbe:
            failureThreshold: 60
            httpGet:
              httpHeaders:
                - name: Host
                  value: 127.0.0.1
              path: /admin/health/ready
              port: 4434
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /etc/kratos
              name: other-configs
            - mountPath: /etc/kratos/hooks/kratos-config-hooks.yaml
              name: kratos-config-hooks
              subPath: kratos-config-hooks.yaml
            - mountPath: /etc/config
              name: kratos-config-volume
              readOnly: true
        - env:
            - name: DSN
              valueFrom:
                secretKeyRef:
                  key: DSN
                  name: paralus-db
            - name: KRATOS_PROVIDER_CFG
              value: /etc/kratos/providers.yaml
          image: paralusio/kratos-synchronizer:v0.2.6
          name: synchronizer
          volumeMounts:
            - mountPath: /etc/kratos
              name: other-configs
      initContainers:
        - command:
            - sh
            - -c
            - touch /etc/kratos/providers.yaml
          image: busybox:latest
          name: create-file
          volumeMounts:
            - mountPath: /etc/kratos
              name: other-configs
        - command:
            - sh
            - -c
            - 'echo "function(ctx) { user_id: ctx.identity.id }" > /etc/kratos/body.jsonnet'
          image: busybox:latest
          name: create-login-hook-jsonnetfile
          volumeMounts:
            - mountPath: /etc/kratos
              name: other-configs
      serviceAccountName: paralus-kratos
      volumes:
        - emptyDir: {}
          name: other-configs
        - configMap:
            defaultMode: 420
            name: kratos-config-hooks
          name: kratos-config-hooks
        - configMap:
            name: paralus-kratos-config
          name: kratos-config-volume
